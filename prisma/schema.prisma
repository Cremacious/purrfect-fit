generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String?
  email         String
  emailVerified Boolean
  role          String    @default("user")
  image         String?
  shippingAddress Json?   @db.Json 
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  carts       Cart[]
  orders       Order[]
  reviews      Review[] 

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}


model Product {
 id          String    @id @default(uuid())
 name        String
 slug        String    @unique
 animal    String
 category    String
 images      String[]
 brand       String
 description String
 stock       Int
 price       Decimal   @db.Decimal(12, 2)
 rating      Decimal   @default(0) @db.Decimal(3, 2)
 numReviews  Int       @default(0)
 isFeatured  Boolean   @default(false)
 createdAt   DateTime  @default(now())
 optionALabel String?
 optionBLabel String?
 variants      ProductVariant[] 
 orderItems  OrderItem[]
 reviews     Review[]
}

model ProductVariant {
  id         String   @id @default(uuid())
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  optionA    String? 
  optionB    String? 
  price      Decimal? 
  stock      Int      
  images     String[] 
}

model Cart {
 id          String   @id @default(uuid())
 userId    String   @unique 
 items       Json     @default("[]") @db.Json
 itemsPrice  Decimal  @db.Decimal(12, 2)
 taxPrice    Decimal  @db.Decimal(12, 2)
 totalPrice  Decimal  @db.Decimal(12, 2)
 createdAt   DateTime @default(now())
 user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Order {
 id              String      @id @default(uuid())
 userId          String
 shippingAddress Json        @db.Json
 paymentMethod   String
 isPaid          Boolean     @default(false)
 paidAt          DateTime?
 itemsPrice      Decimal     @db.Decimal(12, 2)
 taxPrice        Decimal     @db.Decimal(12, 2)
 totalPrice      Decimal     @db.Decimal(12, 2)
 status         String      @default("pending")
 paymentIntent   String? 
 createdAt       DateTime    @default(now())
 user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
 orderItems      OrderItem[]
}


model OrderItem {
 id        String   @id @default(uuid())
 orderId   String
 productId String
 name      String
 image     String
 price     Decimal  @db.Decimal(12, 2)
 color     String
 size      String
 quantity  Int
 order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
 product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}


model Review {
 id          String   @id @default(uuid())
 userId      String
 productId   String
 rating      Int
 title       String
 description String
 createdAt   DateTime @default(now())
 user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}